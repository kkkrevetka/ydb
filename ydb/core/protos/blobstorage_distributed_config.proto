syntax = "proto3";

import "ydb/core/protos/config.proto";

package NKikimrBlobStorage;

message TNodeIdentifier {
    string Host = 1;
    uint32 Port = 2;
    uint32 NodeId = 3;
}

message TStorageConfig { // contents of storage metadata
    uint64 Generation = 1; // stored generation
    bytes Fingerprint = 2; // hash for config validation (must be the same for all nodes with the same Generation)
    NKikimrConfig.TBlobStorageConfig BlobStorageConfig = 3; // NodeWardenServiceSet for static group is inside
    repeated TNodeIdentifier AgreedNodes = 4; // node set that has agreed to this configuration
}

message TPDiskMetadataRecord {
    TStorageConfig StorageConfig = 1;
}

// Attach sender node to the recipient one; if already bound, then just update configuration.
message TEvNodeConfigPush {
    bool Initial = 1; // set to true if this push is initial connection establishment
    reserved 2;
    repeated uint32 NewBoundNodeIds = 3; // a list of nodes (not including sender) that are attached
    repeated uint32 DeletedBoundNodeIds = 4; // a list of detached nodes
}

// Used to reverse-propagate configuration and to confirm/reject initial TEvNodePushBinding query.
message TEvNodeConfigReversePush {
    uint32 RootNodeId = 2; // current tree root as known by the sender, always nonzero
    bool Rejected = 3; // is the request rejected due to cyclic graph?
}

// Remove node from bound list.
message TEvNodeConfigUnbind {
}

// Propagate query to the tree bottom and collect replies.
message TEvNodeConfigScatter {
    message TCollectConfigs {
    }

    message TProposeStorageConfig {
        optional TStorageConfig Config = 1;
    }

    message TCommitStorageConfig {
        optional TStorageConfig Config = 1;
    }

    optional uint64 Cookie = 1;

    oneof Request {
        TCollectConfigs CollectConfigs = 2;
        TProposeStorageConfig ProposeStorageConfig = 3;
        TCommitStorageConfig CommitStorageConfig = 4;
    }
}

// Collected replies from the bottom.
message TEvNodeConfigGather {
    message TCollectConfigs {
        message TItem {
            repeated TNodeIdentifier Nodes = 1; // nodes with the same config
            optional TStorageConfig Config = 2; // the config itself
        }
        repeated TItem Items = 1;
    }

    message TProposeStorageConfig {
    }

    message TCommitStorageConfig {
    }

    optional uint64 Cookie = 1;

    oneof Response {
        TCollectConfigs CollectConfigs = 2;
        TProposeStorageConfig ProposeStorageConfig = 3;
        TCommitStorageConfig CommitStorageConfig = 4;
    }
}
