// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.0
// source: ydb/library/yql/providers/generic/connector/api/service/protos/connector.proto

package protos

import (
	common "github.com/ydb-platform/ydb/ydb/library/yql/providers/generic/connector/api/common"
	Ydb "github.com/ydb-platform/ydb-go-genproto/protos/Ydb"
	Ydb_Issue "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Issue"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TReadSplitsRequest_EMode int32

const (
	TReadSplitsRequest_MODE_RESERVED TReadSplitsRequest_EMode = 0
	// Connector will read splits in a single thread one by one.
	// The data will be returned in the order corresponding to the order of requested splits.
	TReadSplitsRequest_ORDERED TReadSplitsRequest_EMode = 1
	// Connector may read different splits concurrently and send the split fragments to the response stream
	// as soon as the data is obtained from the data source. Thus the stream is multiplexed between splits.
	TReadSplitsRequest_UNORDERED TReadSplitsRequest_EMode = 2
)

// Enum value maps for TReadSplitsRequest_EMode.
var (
	TReadSplitsRequest_EMode_name = map[int32]string{
		0: "MODE_RESERVED",
		1: "ORDERED",
		2: "UNORDERED",
	}
	TReadSplitsRequest_EMode_value = map[string]int32{
		"MODE_RESERVED": 0,
		"ORDERED":       1,
		"UNORDERED":     2,
	}
)

func (x TReadSplitsRequest_EMode) Enum() *TReadSplitsRequest_EMode {
	p := new(TReadSplitsRequest_EMode)
	*p = x
	return p
}

func (x TReadSplitsRequest_EMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TReadSplitsRequest_EMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[0].Descriptor()
}

func (TReadSplitsRequest_EMode) Type() protoreflect.EnumType {
	return &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[0]
}

func (x TReadSplitsRequest_EMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TReadSplitsRequest_EMode.Descriptor instead.
func (TReadSplitsRequest_EMode) EnumDescriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{9, 0}
}

type TReadSplitsRequest_EFormat int32

const (
	TReadSplitsRequest_FORMAT_RESERVED TReadSplitsRequest_EFormat = 0
	// ColumnSet is a simple representation of columnar data.
	// Do not use in production.
	TReadSplitsRequest_COLUMN_SET TReadSplitsRequest_EFormat = 1
	// Arrow IPC Streaming format:
	// https://arrow.apache.org/docs/format/Columnar.html#ipc-streaming-format
	TReadSplitsRequest_ARROW_IPC_STREAMING TReadSplitsRequest_EFormat = 2
)

// Enum value maps for TReadSplitsRequest_EFormat.
var (
	TReadSplitsRequest_EFormat_name = map[int32]string{
		0: "FORMAT_RESERVED",
		1: "COLUMN_SET",
		2: "ARROW_IPC_STREAMING",
	}
	TReadSplitsRequest_EFormat_value = map[string]int32{
		"FORMAT_RESERVED":     0,
		"COLUMN_SET":          1,
		"ARROW_IPC_STREAMING": 2,
	}
)

func (x TReadSplitsRequest_EFormat) Enum() *TReadSplitsRequest_EFormat {
	p := new(TReadSplitsRequest_EFormat)
	*p = x
	return p
}

func (x TReadSplitsRequest_EFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TReadSplitsRequest_EFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[1].Descriptor()
}

func (TReadSplitsRequest_EFormat) Type() protoreflect.EnumType {
	return &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[1]
}

func (x TReadSplitsRequest_EFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TReadSplitsRequest_EFormat.Descriptor instead.
func (TReadSplitsRequest_EFormat) EnumDescriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{9, 1}
}

// An operation code.
type TFilter_TComparison_TBinary_EOperation int32

const (
	TFilter_TComparison_TBinary_RESERVED TFilter_TComparison_TBinary_EOperation = 0
	TFilter_TComparison_TBinary_L        TFilter_TComparison_TBinary_EOperation = 1 // renders to "col < value"
	TFilter_TComparison_TBinary_LE       TFilter_TComparison_TBinary_EOperation = 2 // renders to "col <= value"
	TFilter_TComparison_TBinary_EQ       TFilter_TComparison_TBinary_EOperation = 3 // renders to "col = value"
	TFilter_TComparison_TBinary_NE       TFilter_TComparison_TBinary_EOperation = 4 // renders to "col != value"
	TFilter_TComparison_TBinary_GE       TFilter_TComparison_TBinary_EOperation = 5 // renders to "col >= value"
	TFilter_TComparison_TBinary_G        TFilter_TComparison_TBinary_EOperation = 6 // renders to "col > value"
)

// Enum value maps for TFilter_TComparison_TBinary_EOperation.
var (
	TFilter_TComparison_TBinary_EOperation_name = map[int32]string{
		0: "RESERVED",
		1: "L",
		2: "LE",
		3: "EQ",
		4: "NE",
		5: "GE",
		6: "G",
	}
	TFilter_TComparison_TBinary_EOperation_value = map[string]int32{
		"RESERVED": 0,
		"L":        1,
		"LE":       2,
		"EQ":       3,
		"NE":       4,
		"GE":       5,
		"G":        6,
	}
)

func (x TFilter_TComparison_TBinary_EOperation) Enum() *TFilter_TComparison_TBinary_EOperation {
	p := new(TFilter_TComparison_TBinary_EOperation)
	*p = x
	return p
}

func (x TFilter_TComparison_TBinary_EOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TFilter_TComparison_TBinary_EOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[2].Descriptor()
}

func (TFilter_TComparison_TBinary_EOperation) Type() protoreflect.EnumType {
	return &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[2]
}

func (x TFilter_TComparison_TBinary_EOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TFilter_TComparison_TBinary_EOperation.Descriptor instead.
func (TFilter_TComparison_TBinary_EOperation) EnumDescriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 0, 0, 0}
}

// TListTablesRequest requests the list of tables in a particular database of the data source
type TListTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data source instance to connect
	DataSourceInstance *common.TDataSourceInstance `protobuf:"bytes,1,opt,name=data_source_instance,json=dataSourceInstance,proto3" json:"data_source_instance,omitempty"`
	// There may be a huge number of tables in the data source,
	// and here are ways to extract only necessary ones:
	//
	// Types that are assignable to Filtering:
	//
	//	*TListTablesRequest_Pattern
	Filtering isTListTablesRequest_Filtering `protobuf_oneof:"filtering"`
}

func (x *TListTablesRequest) Reset() {
	*x = TListTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListTablesRequest) ProtoMessage() {}

func (x *TListTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListTablesRequest.ProtoReflect.Descriptor instead.
func (*TListTablesRequest) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{0}
}

func (x *TListTablesRequest) GetDataSourceInstance() *common.TDataSourceInstance {
	if x != nil {
		return x.DataSourceInstance
	}
	return nil
}

func (m *TListTablesRequest) GetFiltering() isTListTablesRequest_Filtering {
	if m != nil {
		return m.Filtering
	}
	return nil
}

func (x *TListTablesRequest) GetPattern() string {
	if x, ok := x.GetFiltering().(*TListTablesRequest_Pattern); ok {
		return x.Pattern
	}
	return ""
}

type isTListTablesRequest_Filtering interface {
	isTListTablesRequest_Filtering()
}

type TListTablesRequest_Pattern struct {
	// Regexp to filter table names
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3,oneof"`
}

func (*TListTablesRequest_Pattern) isTListTablesRequest_Filtering() {}

// TListTablesResponse returns the list of tables in a particular database of the data source
type TListTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table names list
	Tables []string `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	// Call result
	Error *TError `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TListTablesResponse) Reset() {
	*x = TListTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListTablesResponse) ProtoMessage() {}

func (x *TListTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListTablesResponse.ProtoReflect.Descriptor instead.
func (*TListTablesResponse) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{1}
}

func (x *TListTablesResponse) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *TListTablesResponse) GetError() *TError {
	if x != nil {
		return x.Error
	}
	return nil
}

// TDescribeTableRequest requests table metadata
type TDescribeTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data source instance to connect
	DataSourceInstance *common.TDataSourceInstance `protobuf:"bytes,1,opt,name=data_source_instance,json=dataSourceInstance,proto3" json:"data_source_instance,omitempty"`
	// Table to describe
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *TDescribeTableRequest) Reset() {
	*x = TDescribeTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeTableRequest) ProtoMessage() {}

func (x *TDescribeTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeTableRequest.ProtoReflect.Descriptor instead.
func (*TDescribeTableRequest) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{2}
}

func (x *TDescribeTableRequest) GetDataSourceInstance() *common.TDataSourceInstance {
	if x != nil {
		return x.DataSourceInstance
	}
	return nil
}

func (x *TDescribeTableRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

// TDescribeTableResponse returns table metadata
type TDescribeTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The whole schema of a table
	Schema *TSchema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	// Call result
	Error *TError `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TDescribeTableResponse) Reset() {
	*x = TDescribeTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeTableResponse) ProtoMessage() {}

func (x *TDescribeTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeTableResponse.ProtoReflect.Descriptor instead.
func (*TDescribeTableResponse) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{3}
}

func (x *TDescribeTableResponse) GetSchema() *TSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *TDescribeTableResponse) GetError() *TError {
	if x != nil {
		return x.Error
	}
	return nil
}

// TSchema represents the schema of the table
type TSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Columns with YQL types
	Columns []*Ydb.Column `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"` // TODO: optional metadata?
}

func (x *TSchema) Reset() {
	*x = TSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSchema) ProtoMessage() {}

func (x *TSchema) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSchema.ProtoReflect.Descriptor instead.
func (*TSchema) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{4}
}

func (x *TSchema) GetColumns() []*Ydb.Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

// TListSplitRequest asks Connector to split the requested data into elementary parts.
type TListSplitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data source instance to connect
	DataSourceInstance *common.TDataSourceInstance `protobuf:"bytes,1,opt,name=data_source_instance,json=dataSourceInstance,proto3" json:"data_source_instance,omitempty"`
	// YQ engine may want to read data from different tables simultaneously.
	// Perhaps Connector will provide consistency guarantees across the tables some day.
	Selects []*TSelect `protobuf:"bytes,2,rep,name=selects,proto3" json:"selects,omitempty"`
	// Defines the number of splits (and, as a consequence, affects the size of the split).
	// If you don't want splitting, set 1.
	MaxSplitCount uint32 `protobuf:"varint,3,opt,name=max_split_count,json=maxSplitCount,proto3" json:"max_split_count,omitempty"`
	// Connector will try to divide the data into the splits of this size,
	// but the exact match is not guaranteed.
	// Also this setting can be overridden by max_split_count.
	SplitSize uint64 `protobuf:"varint,4,opt,name=split_size,json=splitSize,proto3" json:"split_size,omitempty"`
	// Sometimes YQ doesn't know the exact size of the data set,
	// so it asks Connector to split the data into the splits of $split_size,
	// and the $max_split_count = MaxUINT32.
	// But if the data is too large, and too many splits will be generated,
	// this may exceed the memory available for YQ.
	// In such case, it's better to fail fast. This limit helps to implement it:
	SplitNumberLimit uint64 `protobuf:"varint,5,opt,name=split_number_limit,json=splitNumberLimit,proto3" json:"split_number_limit,omitempty"`
}

func (x *TListSplitsRequest) Reset() {
	*x = TListSplitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListSplitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListSplitsRequest) ProtoMessage() {}

func (x *TListSplitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListSplitsRequest.ProtoReflect.Descriptor instead.
func (*TListSplitsRequest) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{5}
}

func (x *TListSplitsRequest) GetDataSourceInstance() *common.TDataSourceInstance {
	if x != nil {
		return x.DataSourceInstance
	}
	return nil
}

func (x *TListSplitsRequest) GetSelects() []*TSelect {
	if x != nil {
		return x.Selects
	}
	return nil
}

func (x *TListSplitsRequest) GetMaxSplitCount() uint32 {
	if x != nil {
		return x.MaxSplitCount
	}
	return 0
}

func (x *TListSplitsRequest) GetSplitSize() uint64 {
	if x != nil {
		return x.SplitSize
	}
	return 0
}

func (x *TListSplitsRequest) GetSplitNumberLimit() uint64 {
	if x != nil {
		return x.SplitNumberLimit
	}
	return 0
}

// TListSplitResponse returns the list of splits for a particular set of table partitions
type TListSplitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the list of splits for concurrent reading
	Splits []*TSplit `protobuf:"bytes,1,rep,name=splits,proto3" json:"splits,omitempty"`
	// Call result
	Error *TError `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TListSplitsResponse) Reset() {
	*x = TListSplitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListSplitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListSplitsResponse) ProtoMessage() {}

func (x *TListSplitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListSplitsResponse.ProtoReflect.Descriptor instead.
func (*TListSplitsResponse) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{6}
}

func (x *TListSplitsResponse) GetSplits() []*TSplit {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (x *TListSplitsResponse) GetError() *TError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Select describes what to read from the data source.
//
// In RDBMS systems this call internally transforms into SQL expression using this template:
// SELECT $what
// FROM $from
// WHERE $filter
// LIMIT $limit [OFFSET $offset]
// TODO: support JOIN, ORDER BY, GROUP BY
type TSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data source instance to connect
	DataSourceInstance *common.TDataSourceInstance `protobuf:"bytes,1,opt,name=data_source_instance,json=dataSourceInstance,proto3" json:"data_source_instance,omitempty"`
	// Transforms into SELECT $what.
	What *TSelect_TWhat `protobuf:"bytes,2,opt,name=what,proto3" json:"what,omitempty"`
	// Transforms into FROM $from
	From *TSelect_TFrom `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// Transforms into WHERE $filter.
	// Optional field.
	Where *TSelect_TWhere `protobuf:"bytes,4,opt,name=where,proto3" json:"where,omitempty"`
	// Transforms into LIMIT $limit [OFFSET $offset].
	// Optional field.
	Limit *TSelect_TLimit `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TSelect) Reset() {
	*x = TSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect) ProtoMessage() {}

func (x *TSelect) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect.ProtoReflect.Descriptor instead.
func (*TSelect) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{7}
}

func (x *TSelect) GetDataSourceInstance() *common.TDataSourceInstance {
	if x != nil {
		return x.DataSourceInstance
	}
	return nil
}

func (x *TSelect) GetWhat() *TSelect_TWhat {
	if x != nil {
		return x.What
	}
	return nil
}

func (x *TSelect) GetFrom() *TSelect_TFrom {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TSelect) GetWhere() *TSelect_TWhere {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *TSelect) GetLimit() *TSelect_TLimit {
	if x != nil {
		return x.Limit
	}
	return nil
}

// Split is a certain part of a table. In general, it should be much smaller than a partition.
// It also represents a unit of a parallel work for YQ engine.
type TSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Every split contains the description of SELECT it was generated for.
	Select *TSelect `protobuf:"bytes,1,opt,name=select,proto3" json:"select,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*TSplit_Description
	Payload isTSplit_Payload `protobuf_oneof:"payload"`
}

func (x *TSplit) Reset() {
	*x = TSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSplit) ProtoMessage() {}

func (x *TSplit) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSplit.ProtoReflect.Descriptor instead.
func (*TSplit) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{8}
}

func (x *TSplit) GetSelect() *TSelect {
	if x != nil {
		return x.Select
	}
	return nil
}

func (m *TSplit) GetPayload() isTSplit_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TSplit) GetDescription() []byte {
	if x, ok := x.GetPayload().(*TSplit_Description); ok {
		return x.Description
	}
	return nil
}

type isTSplit_Payload interface {
	isTSplit_Payload()
}

type TSplit_Description struct {
	// Different data sources may use different ways to describe a split,
	// and we don't want YQ to dig into its internals (at least now),
	// so we make the description opaque for YQ.
	Description []byte `protobuf:"bytes,2,opt,name=description,proto3,oneof"`
}

func (*TSplit_Description) isTSplit_Payload() {}

// ReadDataRequest reads the data associated with a particular table split.
type TReadSplitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data source instance to connect
	DataSourceInstance *common.TDataSourceInstance `protobuf:"bytes,1,opt,name=data_source_instance,json=dataSourceInstance,proto3" json:"data_source_instance,omitempty"`
	// Splits that YQ engine would like to read.
	Splits []*TSplit `protobuf:"bytes,2,rep,name=splits,proto3" json:"splits,omitempty"`
	// Determines the mode of data extraction
	Mode TReadSplitsRequest_EMode `protobuf:"varint,3,opt,name=mode,proto3,enum=NYql.NConnector.NApi.TReadSplitsRequest_EMode" json:"mode,omitempty"`
	// Determines the format of data representation
	Format TReadSplitsRequest_EFormat `protobuf:"varint,4,opt,name=format,proto3,enum=NYql.NConnector.NApi.TReadSplitsRequest_EFormat" json:"format,omitempty"`
	// Pagination helps to manage the process of fragmentation data stream from the data source into the fragments.
	// If empty, the whole result will be sent back in a single message.
	Pagination *TPagination `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Specifies the location of split from where to start reading.
	// If stream has been recently interrupted, YQ may retry reading the split from the interrupted block
	// instead of reading the split from scratch.
	// If empty, the connector will return the split data from the very beginning.
	Continuation *TContinuation `protobuf:"bytes,6,opt,name=continuation,proto3" json:"continuation,omitempty"`
}

func (x *TReadSplitsRequest) Reset() {
	*x = TReadSplitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadSplitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadSplitsRequest) ProtoMessage() {}

func (x *TReadSplitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadSplitsRequest.ProtoReflect.Descriptor instead.
func (*TReadSplitsRequest) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{9}
}

func (x *TReadSplitsRequest) GetDataSourceInstance() *common.TDataSourceInstance {
	if x != nil {
		return x.DataSourceInstance
	}
	return nil
}

func (x *TReadSplitsRequest) GetSplits() []*TSplit {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (x *TReadSplitsRequest) GetMode() TReadSplitsRequest_EMode {
	if x != nil {
		return x.Mode
	}
	return TReadSplitsRequest_MODE_RESERVED
}

func (x *TReadSplitsRequest) GetFormat() TReadSplitsRequest_EFormat {
	if x != nil {
		return x.Format
	}
	return TReadSplitsRequest_FORMAT_RESERVED
}

func (x *TReadSplitsRequest) GetPagination() *TPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *TReadSplitsRequest) GetContinuation() *TContinuation {
	if x != nil {
		return x.Continuation
	}
	return nil
}

// ReadDataResponse returns the data corresponding to a particular split
type TReadSplitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// There may be various formats to represent data
	//
	// Types that are assignable to Payload:
	//
	//	*TReadSplitsResponse_ColumnSet
	//	*TReadSplitsResponse_ArrowIpcStreaming
	Payload isTReadSplitsResponse_Payload `protobuf_oneof:"payload"`
	// Since multiple splits can be read within one request, it's important to
	// match the received data with the requested split.
	SplitIndexNumber uint32 `protobuf:"varint,3,opt,name=split_index_number,json=splitIndexNumber,proto3" json:"split_index_number,omitempty"`
	// Specifies the location where the next block starts.
	// If stream has been interrupted, YQ may retry reading using the Continuation message
	// received for the last time.
	Continuation *TContinuation `protobuf:"bytes,4,opt,name=continuation,proto3" json:"continuation,omitempty"`
	// Call result
	Error *TError `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TReadSplitsResponse) Reset() {
	*x = TReadSplitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadSplitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadSplitsResponse) ProtoMessage() {}

func (x *TReadSplitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadSplitsResponse.ProtoReflect.Descriptor instead.
func (*TReadSplitsResponse) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{10}
}

func (m *TReadSplitsResponse) GetPayload() isTReadSplitsResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TReadSplitsResponse) GetColumnSet() *TReadSplitsResponse_TColumnSet {
	if x, ok := x.GetPayload().(*TReadSplitsResponse_ColumnSet); ok {
		return x.ColumnSet
	}
	return nil
}

func (x *TReadSplitsResponse) GetArrowIpcStreaming() []byte {
	if x, ok := x.GetPayload().(*TReadSplitsResponse_ArrowIpcStreaming); ok {
		return x.ArrowIpcStreaming
	}
	return nil
}

func (x *TReadSplitsResponse) GetSplitIndexNumber() uint32 {
	if x != nil {
		return x.SplitIndexNumber
	}
	return 0
}

func (x *TReadSplitsResponse) GetContinuation() *TContinuation {
	if x != nil {
		return x.Continuation
	}
	return nil
}

func (x *TReadSplitsResponse) GetError() *TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type isTReadSplitsResponse_Payload interface {
	isTReadSplitsResponse_Payload()
}

type TReadSplitsResponse_ColumnSet struct {
	// Columnar data in protobuf format with YDB types.
	// Use it only for debugging, don't use in production.
	ColumnSet *TReadSplitsResponse_TColumnSet `protobuf:"bytes,1,opt,name=column_set,json=columnSet,proto3,oneof"`
}

type TReadSplitsResponse_ArrowIpcStreaming struct {
	// Data in Arrow IPC streaming format.
	ArrowIpcStreaming []byte `protobuf:"bytes,2,opt,name=arrow_ipc_streaming,json=arrowIpcStreaming,proto3,oneof"`
}

func (*TReadSplitsResponse_ColumnSet) isTReadSplitsResponse_Payload() {}

func (*TReadSplitsResponse_ArrowIpcStreaming) isTReadSplitsResponse_Payload() {}

// Pagination describes how to split data stream from data source into fragments
// in order to return them as separate GRPC messages to YQ.
type TPagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In the RDBMS the default pagination method is LIMIT/OFFSET.
	// Instead of full table scan:
	//
	// # SELECT col1 FROM table
	//
	// connector may internally invoke multiple requests to the data:
	//
	// SELECT col1 FROM table LIMIT $rows                     // return first $rows to YQ
	// SELECT col1 FROM table LIMIT $rows OFFSET $rows        // return next  $rows to YQ
	// SELECT col1 FROM table LIMIT $rows OFFSET $rows        // (...)
	// SELECT col1 FROM table LIMIT $rows OFFSET $rows
	// (...)
	//
	// Some RDBMS may support cursors as the more advanced way of pagination.
	//
	// BEGIN;
	// DECLARE cur CURSOR FOR SELECT col1 FROM table;
	// FETCH $rows FROM cur;                                   // return first $rows to YQ
	// FETCH $rows FROM cur;                                   // return next  $rows to YQ
	// FETCH $rows FROM cur;                                   // (...)
	// (...)
	// COMMIT;
	//
	// The choice of pagination method is the responsibility of the connector (at least now),
	// but the engine can specify how many rows to return in each message of the stream.
	Rows uint64 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	// Memory limitation helps to control the effective size of a block returned in every response.
	// It may override the previous limit.
	Bytes uint64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *TPagination) Reset() {
	*x = TPagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPagination) ProtoMessage() {}

func (x *TPagination) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPagination.ProtoReflect.Descriptor instead.
func (*TPagination) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{11}
}

func (x *TPagination) GetRows() uint64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *TPagination) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

// Continuation is a special type useful for the request retry.
// In case if split reading was interrupted,
// the engine does not have to read all the split data from the very beginning,
// it can specify the location from where it wants to reread the data instead.
type TContinuation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*TContinuation_Description
	Payload isTContinuation_Payload `protobuf_oneof:"payload"`
}

func (x *TContinuation) Reset() {
	*x = TContinuation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TContinuation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TContinuation) ProtoMessage() {}

func (x *TContinuation) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TContinuation.ProtoReflect.Descriptor instead.
func (*TContinuation) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{12}
}

func (m *TContinuation) GetPayload() isTContinuation_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TContinuation) GetDescription() []byte {
	if x, ok := x.GetPayload().(*TContinuation_Description); ok {
		return x.Description
	}
	return nil
}

type isTContinuation_Payload interface {
	isTContinuation_Payload()
}

type TContinuation_Description struct {
	// In general description should be opaque to YQ.
	Description []byte `protobuf:"bytes,1,opt,name=description,proto3,oneof"`
}

func (*TContinuation_Description) isTContinuation_Payload() {}

// Filter - a special type to describe a constraint (or a set of constraints) applied to SQL expression:
// SELECT $columns FROM $table WHERE $filter.
// It can be also used for the purpose of split pruning.
type TFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*TFilter_Comparison
	//	*TFilter_Conjunction
	//	*TFilter_Disjunction
	//	*TFilter_Negation
	//	*TFilter_SubExpr
	Payload isTFilter_Payload `protobuf_oneof:"payload"`
}

func (x *TFilter) Reset() {
	*x = TFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter) ProtoMessage() {}

func (x *TFilter) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter.ProtoReflect.Descriptor instead.
func (*TFilter) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13}
}

func (m *TFilter) GetPayload() isTFilter_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TFilter) GetComparison() *TFilter_TComparison {
	if x, ok := x.GetPayload().(*TFilter_Comparison); ok {
		return x.Comparison
	}
	return nil
}

func (x *TFilter) GetConjunction() *TFilter_TConjunction {
	if x, ok := x.GetPayload().(*TFilter_Conjunction); ok {
		return x.Conjunction
	}
	return nil
}

func (x *TFilter) GetDisjunction() *TFilter_TDisjunction {
	if x, ok := x.GetPayload().(*TFilter_Disjunction); ok {
		return x.Disjunction
	}
	return nil
}

func (x *TFilter) GetNegation() *TFilter_TNegation {
	if x, ok := x.GetPayload().(*TFilter_Negation); ok {
		return x.Negation
	}
	return nil
}

func (x *TFilter) GetSubExpr() *TFilter_TSubExpr {
	if x, ok := x.GetPayload().(*TFilter_SubExpr); ok {
		return x.SubExpr
	}
	return nil
}

type isTFilter_Payload interface {
	isTFilter_Payload()
}

type TFilter_Comparison struct {
	Comparison *TFilter_TComparison `protobuf:"bytes,1,opt,name=comparison,proto3,oneof"`
}

type TFilter_Conjunction struct {
	Conjunction *TFilter_TConjunction `protobuf:"bytes,2,opt,name=conjunction,proto3,oneof"`
}

type TFilter_Disjunction struct {
	Disjunction *TFilter_TDisjunction `protobuf:"bytes,3,opt,name=disjunction,proto3,oneof"`
}

type TFilter_Negation struct {
	Negation *TFilter_TNegation `protobuf:"bytes,4,opt,name=negation,proto3,oneof"`
}

type TFilter_SubExpr struct {
	SubExpr *TFilter_TSubExpr `protobuf:"bytes,5,opt,name=sub_expr,json=subExpr,proto3,oneof"`
}

func (*TFilter_Comparison) isTFilter_Payload() {}

func (*TFilter_Conjunction) isTFilter_Payload() {}

func (*TFilter_Disjunction) isTFilter_Payload() {}

func (*TFilter_Negation) isTFilter_Payload() {}

func (*TFilter_SubExpr) isTFilter_Payload() {}

// Special type to describe the result of any operation
type TError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// High-level code
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Error message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Detailed explanation of a problem;
	// must be empty if status == SUCCESS
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *TError) Reset() {
	*x = TError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TError) ProtoMessage() {}

func (x *TError) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TError.ProtoReflect.Descriptor instead.
func (*TError) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14}
}

func (x *TError) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *TError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TError) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

// TAst is an internal representation of an YQL request.
// Advanced connectors may use it for the full-fledged implementations of the push down.
type TAst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*TAst_Atom
	//	*TAst_List
	Payload isTAst_Payload `protobuf_oneof:"payload"`
}

func (x *TAst) Reset() {
	*x = TAst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAst) ProtoMessage() {}

func (x *TAst) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAst.ProtoReflect.Descriptor instead.
func (*TAst) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{15}
}

func (m *TAst) GetPayload() isTAst_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TAst) GetAtom() []byte {
	if x, ok := x.GetPayload().(*TAst_Atom); ok {
		return x.Atom
	}
	return nil
}

func (x *TAst) GetList() *TAst_TList {
	if x, ok := x.GetPayload().(*TAst_List); ok {
		return x.List
	}
	return nil
}

type isTAst_Payload interface {
	isTAst_Payload()
}

type TAst_Atom struct {
	Atom []byte `protobuf:"bytes,1,opt,name=atom,proto3,oneof"`
}

type TAst_List struct {
	List *TAst_TList `protobuf:"bytes,2,opt,name=list,proto3,oneof"`
}

func (*TAst_Atom) isTAst_Payload() {}

func (*TAst_List) isTAst_Payload() {}

// Describes what particularly to get from the data source
type TSelect_TWhat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: this API intentionally makes it not possible to request 'SELECT *'.
	// YQ must provide all the column names explicitly.
	//
	// Еmpty list means that YQ wants to get empty tuples in the response.
	// On the connector's side this request will be transformed into something like
	// SELECT 1 FROM $table (...)
	Items []*TSelect_TWhat_TItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TSelect_TWhat) Reset() {
	*x = TSelect_TWhat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSelect_TWhat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect_TWhat) ProtoMessage() {}

func (x *TSelect_TWhat) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect_TWhat.ProtoReflect.Descriptor instead.
func (*TSelect_TWhat) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{7, 0}
}

func (x *TSelect_TWhat) GetItems() []*TSelect_TWhat_TItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type TSelect_TFrom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: for some of RDBMS the table name may be not enough
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *TSelect_TFrom) Reset() {
	*x = TSelect_TFrom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSelect_TFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect_TFrom) ProtoMessage() {}

func (x *TSelect_TFrom) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect_TFrom.ProtoReflect.Descriptor instead.
func (*TSelect_TFrom) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{7, 1}
}

func (x *TSelect_TFrom) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type TSelect_TWhere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Strongly typed tree of predicates
	FilterTyped *TFilter `protobuf:"bytes,1,opt,name=filter_typed,json=filterTyped,proto3" json:"filter_typed,omitempty"`
	// An internal representation of YQL request part describing filters.
	// Advanced connectors may use it for the full-fledged implementations of the push down.
	FilterRaw *TAst `protobuf:"bytes,2,opt,name=filter_raw,json=filterRaw,proto3" json:"filter_raw,omitempty"`
}

func (x *TSelect_TWhere) Reset() {
	*x = TSelect_TWhere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSelect_TWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect_TWhere) ProtoMessage() {}

func (x *TSelect_TWhere) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect_TWhere.ProtoReflect.Descriptor instead.
func (*TSelect_TWhere) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{7, 2}
}

func (x *TSelect_TWhere) GetFilterTyped() *TFilter {
	if x != nil {
		return x.FilterTyped
	}
	return nil
}

func (x *TSelect_TWhere) GetFilterRaw() *TAst {
	if x != nil {
		return x.FilterRaw
	}
	return nil
}

type TSelect_TLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *TSelect_TLimit) Reset() {
	*x = TSelect_TLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSelect_TLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect_TLimit) ProtoMessage() {}

func (x *TSelect_TLimit) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect_TLimit.ProtoReflect.Descriptor instead.
func (*TSelect_TLimit) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{7, 3}
}

func (x *TSelect_TLimit) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TSelect_TLimit) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type TSelect_TWhat_TItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// YQ can read particular table columns or call aggregate functions, for example.
	//
	// Types that are assignable to Payload:
	//
	//	*TSelect_TWhat_TItem_Column
	Payload isTSelect_TWhat_TItem_Payload `protobuf_oneof:"payload"`
}

func (x *TSelect_TWhat_TItem) Reset() {
	*x = TSelect_TWhat_TItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSelect_TWhat_TItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect_TWhat_TItem) ProtoMessage() {}

func (x *TSelect_TWhat_TItem) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect_TWhat_TItem.ProtoReflect.Descriptor instead.
func (*TSelect_TWhat_TItem) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (m *TSelect_TWhat_TItem) GetPayload() isTSelect_TWhat_TItem_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TSelect_TWhat_TItem) GetColumn() *Ydb.Column {
	if x, ok := x.GetPayload().(*TSelect_TWhat_TItem_Column); ok {
		return x.Column
	}
	return nil
}

type isTSelect_TWhat_TItem_Payload interface {
	isTSelect_TWhat_TItem_Payload()
}

type TSelect_TWhat_TItem_Column struct {
	// a column to read
	Column *Ydb.Column `protobuf:"bytes,1,opt,name=column,proto3,oneof"`
}

func (*TSelect_TWhat_TItem_Column) isTSelect_TWhat_TItem_Payload() {}

// Protobuf columnar representation of data.
// Use it only for debugging, don't use in production.
type TReadSplitsResponse_TColumnSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta []*Ydb.Column                             `protobuf:"bytes,1,rep,name=meta,proto3" json:"meta,omitempty"`
	Data []*TReadSplitsResponse_TColumnSet_TColumn `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TReadSplitsResponse_TColumnSet) Reset() {
	*x = TReadSplitsResponse_TColumnSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadSplitsResponse_TColumnSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadSplitsResponse_TColumnSet) ProtoMessage() {}

func (x *TReadSplitsResponse_TColumnSet) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadSplitsResponse_TColumnSet.ProtoReflect.Descriptor instead.
func (*TReadSplitsResponse_TColumnSet) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{10, 0}
}

func (x *TReadSplitsResponse_TColumnSet) GetMeta() []*Ydb.Column {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TReadSplitsResponse_TColumnSet) GetData() []*TReadSplitsResponse_TColumnSet_TColumn {
	if x != nil {
		return x.Data
	}
	return nil
}

type TReadSplitsResponse_TColumnSet_TColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Ydb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TReadSplitsResponse_TColumnSet_TColumn) Reset() {
	*x = TReadSplitsResponse_TColumnSet_TColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadSplitsResponse_TColumnSet_TColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadSplitsResponse_TColumnSet_TColumn) ProtoMessage() {}

func (x *TReadSplitsResponse_TColumnSet_TColumn) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadSplitsResponse_TColumnSet_TColumn.ProtoReflect.Descriptor instead.
func (*TReadSplitsResponse_TColumnSet_TColumn) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{10, 0, 0}
}

func (x *TReadSplitsResponse_TColumnSet_TColumn) GetData() []*Ydb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

// Represents an elementary comparison between a column and some value
type TFilter_TComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*TFilter_TComparison_Binary
	//	*TFilter_TComparison_IsNull
	//	*TFilter_TComparison_IsNotNull
	//	*TFilter_TComparison_In
	//	*TFilter_TComparison_Between
	Payload isTFilter_TComparison_Payload `protobuf_oneof:"payload"`
}

func (x *TFilter_TComparison) Reset() {
	*x = TFilter_TComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter_TComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter_TComparison) ProtoMessage() {}

func (x *TFilter_TComparison) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter_TComparison.ProtoReflect.Descriptor instead.
func (*TFilter_TComparison) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 0}
}

func (m *TFilter_TComparison) GetPayload() isTFilter_TComparison_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TFilter_TComparison) GetBinary() *TFilter_TComparison_TBinary {
	if x, ok := x.GetPayload().(*TFilter_TComparison_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *TFilter_TComparison) GetIsNull() *TFilter_TComparison_TIsNull {
	if x, ok := x.GetPayload().(*TFilter_TComparison_IsNull); ok {
		return x.IsNull
	}
	return nil
}

func (x *TFilter_TComparison) GetIsNotNull() *TFilter_TComparison_TIsNotNull {
	if x, ok := x.GetPayload().(*TFilter_TComparison_IsNotNull); ok {
		return x.IsNotNull
	}
	return nil
}

func (x *TFilter_TComparison) GetIn() *TFilter_TComparison_TIn {
	if x, ok := x.GetPayload().(*TFilter_TComparison_In); ok {
		return x.In
	}
	return nil
}

func (x *TFilter_TComparison) GetBetween() *TFilter_TComparison_TBetween {
	if x, ok := x.GetPayload().(*TFilter_TComparison_Between); ok {
		return x.Between
	}
	return nil
}

type isTFilter_TComparison_Payload interface {
	isTFilter_TComparison_Payload()
}

type TFilter_TComparison_Binary struct {
	Binary *TFilter_TComparison_TBinary `protobuf:"bytes,1,opt,name=binary,proto3,oneof"`
}

type TFilter_TComparison_IsNull struct {
	IsNull *TFilter_TComparison_TIsNull `protobuf:"bytes,2,opt,name=is_null,json=isNull,proto3,oneof"`
}

type TFilter_TComparison_IsNotNull struct {
	IsNotNull *TFilter_TComparison_TIsNotNull `protobuf:"bytes,3,opt,name=is_not_null,json=isNotNull,proto3,oneof"`
}

type TFilter_TComparison_In struct {
	In *TFilter_TComparison_TIn `protobuf:"bytes,4,opt,name=in,proto3,oneof"`
}

type TFilter_TComparison_Between struct {
	Between *TFilter_TComparison_TBetween `protobuf:"bytes,5,opt,name=between,proto3,oneof"`
}

func (*TFilter_TComparison_Binary) isTFilter_TComparison_Payload() {}

func (*TFilter_TComparison_IsNull) isTFilter_TComparison_Payload() {}

func (*TFilter_TComparison_IsNotNull) isTFilter_TComparison_Payload() {}

func (*TFilter_TComparison_In) isTFilter_TComparison_Payload() {}

func (*TFilter_TComparison_Between) isTFilter_TComparison_Payload() {}

// transforms into "AND"
type TFilter_TConjunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operands []*TFilter `protobuf:"bytes,1,rep,name=operands,proto3" json:"operands,omitempty"`
}

func (x *TFilter_TConjunction) Reset() {
	*x = TFilter_TConjunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter_TConjunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter_TConjunction) ProtoMessage() {}

func (x *TFilter_TConjunction) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter_TConjunction.ProtoReflect.Descriptor instead.
func (*TFilter_TConjunction) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 1}
}

func (x *TFilter_TConjunction) GetOperands() []*TFilter {
	if x != nil {
		return x.Operands
	}
	return nil
}

// transforms into "OR"
type TFilter_TDisjunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operands []*TFilter `protobuf:"bytes,1,rep,name=operands,proto3" json:"operands,omitempty"`
}

func (x *TFilter_TDisjunction) Reset() {
	*x = TFilter_TDisjunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter_TDisjunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter_TDisjunction) ProtoMessage() {}

func (x *TFilter_TDisjunction) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter_TDisjunction.ProtoReflect.Descriptor instead.
func (*TFilter_TDisjunction) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 2}
}

func (x *TFilter_TDisjunction) GetOperands() []*TFilter {
	if x != nil {
		return x.Operands
	}
	return nil
}

// transforms into "NOT"
type TFilter_TNegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operand *TFilter `protobuf:"bytes,1,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *TFilter_TNegation) Reset() {
	*x = TFilter_TNegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter_TNegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter_TNegation) ProtoMessage() {}

func (x *TFilter_TNegation) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter_TNegation.ProtoReflect.Descriptor instead.
func (*TFilter_TNegation) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 3}
}

func (x *TFilter_TNegation) GetOperand() *TFilter {
	if x != nil {
		return x.Operand
	}
	return nil
}

// SubExpr transformation rules:
// 1. top-level:      $children
// 2. other levels:  ($children)
type TFilter_TSubExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next level expression
	Operand *TFilter `protobuf:"bytes,1,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *TFilter_TSubExpr) Reset() {
	*x = TFilter_TSubExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter_TSubExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter_TSubExpr) ProtoMessage() {}

func (x *TFilter_TSubExpr) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter_TSubExpr.ProtoReflect.Descriptor instead.
func (*TFilter_TSubExpr) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 4}
}

func (x *TFilter_TSubExpr) GetOperand() *TFilter {
	if x != nil {
		return x.Operand
	}
	return nil
}

// A subset of comparators corresponding to the binary logical operators
type TFilter_TComparison_TBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*TFilter_TComparison_TBinary_TypedValue
	//	*TFilter_TComparison_TBinary_Column
	Payload isTFilter_TComparison_TBinary_Payload `protobuf_oneof:"payload"`
}

func (x *TFilter_TComparison_TBinary) Reset() {
	*x = TFilter_TComparison_TBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter_TComparison_TBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter_TComparison_TBinary) ProtoMessage() {}

func (x *TFilter_TComparison_TBinary) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter_TComparison_TBinary.ProtoReflect.Descriptor instead.
func (*TFilter_TComparison_TBinary) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 0, 0}
}

func (m *TFilter_TComparison_TBinary) GetPayload() isTFilter_TComparison_TBinary_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TFilter_TComparison_TBinary) GetTypedValue() *Ydb.TypedValue {
	if x, ok := x.GetPayload().(*TFilter_TComparison_TBinary_TypedValue); ok {
		return x.TypedValue
	}
	return nil
}

func (x *TFilter_TComparison_TBinary) GetColumn() string {
	if x, ok := x.GetPayload().(*TFilter_TComparison_TBinary_Column); ok {
		return x.Column
	}
	return ""
}

type isTFilter_TComparison_TBinary_Payload interface {
	isTFilter_TComparison_TBinary_Payload()
}

type TFilter_TComparison_TBinary_TypedValue struct {
	// A scalar value
	TypedValue *Ydb.TypedValue `protobuf:"bytes,1,opt,name=typed_value,json=typedValue,proto3,oneof"`
}

type TFilter_TComparison_TBinary_Column struct {
	// A name of another column to compare with
	Column string `protobuf:"bytes,2,opt,name=column,proto3,oneof"`
}

func (*TFilter_TComparison_TBinary_TypedValue) isTFilter_TComparison_TBinary_Payload() {}

func (*TFilter_TComparison_TBinary_Column) isTFilter_TComparison_TBinary_Payload() {}

// Renders to "$column IS NULL"
type TFilter_TComparison_TIsNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *TFilter_TComparison_TIsNull) Reset() {
	*x = TFilter_TComparison_TIsNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter_TComparison_TIsNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter_TComparison_TIsNull) ProtoMessage() {}

func (x *TFilter_TComparison_TIsNull) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter_TComparison_TIsNull.ProtoReflect.Descriptor instead.
func (*TFilter_TComparison_TIsNull) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 0, 1}
}

func (x *TFilter_TComparison_TIsNull) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

// Renders to "$column IS NOT NULL"
type TFilter_TComparison_TIsNotNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *TFilter_TComparison_TIsNotNull) Reset() {
	*x = TFilter_TComparison_TIsNotNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter_TComparison_TIsNotNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter_TComparison_TIsNotNull) ProtoMessage() {}

func (x *TFilter_TComparison_TIsNotNull) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter_TComparison_TIsNotNull.ProtoReflect.Descriptor instead.
func (*TFilter_TComparison_TIsNotNull) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 0, 2}
}

func (x *TFilter_TComparison_TIsNotNull) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

// Renders to "$column IN $(values)"
type TFilter_TComparison_TIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Ydb.TypedValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TFilter_TComparison_TIn) Reset() {
	*x = TFilter_TComparison_TIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter_TComparison_TIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter_TComparison_TIn) ProtoMessage() {}

func (x *TFilter_TComparison_TIn) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter_TComparison_TIn.ProtoReflect.Descriptor instead.
func (*TFilter_TComparison_TIn) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 0, 3}
}

func (x *TFilter_TComparison_TIn) GetValues() []*Ydb.TypedValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Renders to "$column BETWEEN $least AND $greatest"
type TFilter_TComparison_TBetween struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Least    *Ydb.TypedValue `protobuf:"bytes,1,opt,name=least,proto3" json:"least,omitempty"`
	Greatest *Ydb.TypedValue `protobuf:"bytes,2,opt,name=greatest,proto3" json:"greatest,omitempty"`
}

func (x *TFilter_TComparison_TBetween) Reset() {
	*x = TFilter_TComparison_TBetween{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter_TComparison_TBetween) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter_TComparison_TBetween) ProtoMessage() {}

func (x *TFilter_TComparison_TBetween) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter_TComparison_TBetween.ProtoReflect.Descriptor instead.
func (*TFilter_TComparison_TBetween) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 0, 4}
}

func (x *TFilter_TComparison_TBetween) GetLeast() *Ydb.TypedValue {
	if x != nil {
		return x.Least
	}
	return nil
}

func (x *TFilter_TComparison_TBetween) GetGreatest() *Ydb.TypedValue {
	if x != nil {
		return x.Greatest
	}
	return nil
}

type TAst_TList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*TAst `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *TAst_TList) Reset() {
	*x = TAst_TList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAst_TList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAst_TList) ProtoMessage() {}

func (x *TAst_TList) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAst_TList.ProtoReflect.Descriptor instead.
func (*TAst_TList) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{15, 0}
}

func (x *TAst_TList) GetChildren() []*TAst {
	if x != nil {
		return x.Children
	}
	return nil
}

var File_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto protoreflect.FileDescriptor

var file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDesc = []byte{
	0x0a, 0x4e, 0x79, 0x64, 0x62, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x79, 0x71,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x1a, 0x25, 0x79, 0x64, 0x62, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64,
	0x62, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x79,
	0x64, 0x62, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x79, 0x64, 0x62,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x79, 0x64, 0x62, 0x2f,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x79, 0x71, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x59, 0x71, 0x6c,
	0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0x61, 0x0a, 0x13, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b,
	0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x07, 0x54, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x12, 0x54, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5b, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7f, 0x0a, 0x13, 0x54,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x52, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb5, 0x05, 0x0a,
	0x07, 0x54, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x77, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x54, 0x57, 0x68, 0x61, 0x74, 0x52, 0x04, 0x77, 0x68, 0x61, 0x74, 0x12, 0x37,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x46, 0x72, 0x6f,
	0x6d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52, 0x05, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x54, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0x83, 0x01, 0x0a, 0x05, 0x54, 0x57, 0x68, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x57, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x05, 0x54, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x1d, 0x0a, 0x05, 0x54, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x1a, 0x85, 0x01, 0x0a, 0x06, 0x54, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12,
	0x40, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x41, 0x73,
	0x74, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x61, 0x77, 0x1a, 0x36, 0x0a, 0x06,
	0x54, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x6e, 0x0a, 0x06, 0x54, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x35,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc2, 0x04, 0x0a, 0x12, 0x54, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x59, 0x71, 0x6c,
	0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x41, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x05, 0x45, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x22, 0x47, 0x0a, 0x07, 0x45, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x5f, 0x49, 0x50, 0x43, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x81, 0x04, 0x0a, 0x13, 0x54, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x5f, 0x69, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x11, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x49, 0x70,
	0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xaa, 0x01, 0x0a, 0x0a, 0x54, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x53, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x29, 0x0a, 0x07, 0x54, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x37, 0x0a,
	0x0b, 0x54, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x0d, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd5, 0x0b, 0x0a, 0x07, 0x54, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x75, 0x62, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x62, 0x45, 0x78, 0x70, 0x72, 0x1a, 0xa4, 0x06, 0x0a, 0x0b,
	0x54, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4e, 0x59, 0x71, 0x6c,
	0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x06,
	0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3f,
	0x0a, 0x02, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4e, 0x59, 0x71,
	0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12,
	0x4e, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x1a,
	0xac, 0x01, 0x0a, 0x07, 0x54, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x48, 0x0a, 0x0a, 0x45, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x4c, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x45, 0x10, 0x05, 0x12, 0x05, 0x0a, 0x01,
	0x47, 0x10, 0x06, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x21,
	0x0a, 0x07, 0x54, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x1a, 0x24, 0x0a, 0x0a, 0x54, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x1a, 0x2e, 0x0a, 0x03, 0x54, 0x49, 0x6e, 0x12, 0x27,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x08, 0x54, 0x42, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x67, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x67,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x1a, 0x49, 0x0a, 0x0c, 0x54, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x49, 0x0a,
	0x0c, 0x54, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x44, 0x0a, 0x09, 0x54, 0x4e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x1a, 0x43,
	0x0a, 0x08, 0x54, 0x53, 0x75, 0x62, 0x45, 0x78, 0x70, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x86,
	0x01, 0x0a, 0x06, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x04, 0x54, 0x41, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x04, 0x61, 0x74, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x74, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x41, 0x73, 0x74,
	0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x3f,
	0x0a, 0x05, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4e, 0x59, 0x71, 0x6c,
	0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x41, 0x73, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x53, 0x5a, 0x51, 0x61, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x79,
	0x64, 0x62, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x79, 0x71, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x67, 0x6f,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescOnce sync.Once
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescData = file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDesc
)

func file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP() []byte {
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescOnce.Do(func() {
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescData = protoimpl.X.CompressGZIP(file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescData)
	})
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescData
}

var file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_goTypes = []interface{}{
	(TReadSplitsRequest_EMode)(0),                  // 0: NYql.NConnector.NApi.TReadSplitsRequest.EMode
	(TReadSplitsRequest_EFormat)(0),                // 1: NYql.NConnector.NApi.TReadSplitsRequest.EFormat
	(TFilter_TComparison_TBinary_EOperation)(0),    // 2: NYql.NConnector.NApi.TFilter.TComparison.TBinary.EOperation
	(*TListTablesRequest)(nil),                     // 3: NYql.NConnector.NApi.TListTablesRequest
	(*TListTablesResponse)(nil),                    // 4: NYql.NConnector.NApi.TListTablesResponse
	(*TDescribeTableRequest)(nil),                  // 5: NYql.NConnector.NApi.TDescribeTableRequest
	(*TDescribeTableResponse)(nil),                 // 6: NYql.NConnector.NApi.TDescribeTableResponse
	(*TSchema)(nil),                                // 7: NYql.NConnector.NApi.TSchema
	(*TListSplitsRequest)(nil),                     // 8: NYql.NConnector.NApi.TListSplitsRequest
	(*TListSplitsResponse)(nil),                    // 9: NYql.NConnector.NApi.TListSplitsResponse
	(*TSelect)(nil),                                // 10: NYql.NConnector.NApi.TSelect
	(*TSplit)(nil),                                 // 11: NYql.NConnector.NApi.TSplit
	(*TReadSplitsRequest)(nil),                     // 12: NYql.NConnector.NApi.TReadSplitsRequest
	(*TReadSplitsResponse)(nil),                    // 13: NYql.NConnector.NApi.TReadSplitsResponse
	(*TPagination)(nil),                            // 14: NYql.NConnector.NApi.TPagination
	(*TContinuation)(nil),                          // 15: NYql.NConnector.NApi.TContinuation
	(*TFilter)(nil),                                // 16: NYql.NConnector.NApi.TFilter
	(*TError)(nil),                                 // 17: NYql.NConnector.NApi.TError
	(*TAst)(nil),                                   // 18: NYql.NConnector.NApi.TAst
	(*TSelect_TWhat)(nil),                          // 19: NYql.NConnector.NApi.TSelect.TWhat
	(*TSelect_TFrom)(nil),                          // 20: NYql.NConnector.NApi.TSelect.TFrom
	(*TSelect_TWhere)(nil),                         // 21: NYql.NConnector.NApi.TSelect.TWhere
	(*TSelect_TLimit)(nil),                         // 22: NYql.NConnector.NApi.TSelect.TLimit
	(*TSelect_TWhat_TItem)(nil),                    // 23: NYql.NConnector.NApi.TSelect.TWhat.TItem
	(*TReadSplitsResponse_TColumnSet)(nil),         // 24: NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet
	(*TReadSplitsResponse_TColumnSet_TColumn)(nil), // 25: NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet.TColumn
	(*TFilter_TComparison)(nil),                    // 26: NYql.NConnector.NApi.TFilter.TComparison
	(*TFilter_TConjunction)(nil),                   // 27: NYql.NConnector.NApi.TFilter.TConjunction
	(*TFilter_TDisjunction)(nil),                   // 28: NYql.NConnector.NApi.TFilter.TDisjunction
	(*TFilter_TNegation)(nil),                      // 29: NYql.NConnector.NApi.TFilter.TNegation
	(*TFilter_TSubExpr)(nil),                       // 30: NYql.NConnector.NApi.TFilter.TSubExpr
	(*TFilter_TComparison_TBinary)(nil),            // 31: NYql.NConnector.NApi.TFilter.TComparison.TBinary
	(*TFilter_TComparison_TIsNull)(nil),            // 32: NYql.NConnector.NApi.TFilter.TComparison.TIsNull
	(*TFilter_TComparison_TIsNotNull)(nil),         // 33: NYql.NConnector.NApi.TFilter.TComparison.TIsNotNull
	(*TFilter_TComparison_TIn)(nil),                // 34: NYql.NConnector.NApi.TFilter.TComparison.TIn
	(*TFilter_TComparison_TBetween)(nil),           // 35: NYql.NConnector.NApi.TFilter.TComparison.TBetween
	(*TAst_TList)(nil),                             // 36: NYql.NConnector.NApi.TAst.TList
	(*common.TDataSourceInstance)(nil),             // 37: NYql.NConnector.NApi.TDataSourceInstance
	(*Ydb.Column)(nil),                             // 38: Ydb.Column
	(Ydb.StatusIds_StatusCode)(0),                  // 39: Ydb.StatusIds.StatusCode
	(*Ydb_Issue.IssueMessage)(nil),                 // 40: Ydb.Issue.IssueMessage
	(*Ydb.Value)(nil),                              // 41: Ydb.Value
	(*Ydb.TypedValue)(nil),                         // 42: Ydb.TypedValue
}
var file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_depIdxs = []int32{
	37, // 0: NYql.NConnector.NApi.TListTablesRequest.data_source_instance:type_name -> NYql.NConnector.NApi.TDataSourceInstance
	17, // 1: NYql.NConnector.NApi.TListTablesResponse.error:type_name -> NYql.NConnector.NApi.TError
	37, // 2: NYql.NConnector.NApi.TDescribeTableRequest.data_source_instance:type_name -> NYql.NConnector.NApi.TDataSourceInstance
	7,  // 3: NYql.NConnector.NApi.TDescribeTableResponse.schema:type_name -> NYql.NConnector.NApi.TSchema
	17, // 4: NYql.NConnector.NApi.TDescribeTableResponse.error:type_name -> NYql.NConnector.NApi.TError
	38, // 5: NYql.NConnector.NApi.TSchema.columns:type_name -> Ydb.Column
	37, // 6: NYql.NConnector.NApi.TListSplitsRequest.data_source_instance:type_name -> NYql.NConnector.NApi.TDataSourceInstance
	10, // 7: NYql.NConnector.NApi.TListSplitsRequest.selects:type_name -> NYql.NConnector.NApi.TSelect
	11, // 8: NYql.NConnector.NApi.TListSplitsResponse.splits:type_name -> NYql.NConnector.NApi.TSplit
	17, // 9: NYql.NConnector.NApi.TListSplitsResponse.error:type_name -> NYql.NConnector.NApi.TError
	37, // 10: NYql.NConnector.NApi.TSelect.data_source_instance:type_name -> NYql.NConnector.NApi.TDataSourceInstance
	19, // 11: NYql.NConnector.NApi.TSelect.what:type_name -> NYql.NConnector.NApi.TSelect.TWhat
	20, // 12: NYql.NConnector.NApi.TSelect.from:type_name -> NYql.NConnector.NApi.TSelect.TFrom
	21, // 13: NYql.NConnector.NApi.TSelect.where:type_name -> NYql.NConnector.NApi.TSelect.TWhere
	22, // 14: NYql.NConnector.NApi.TSelect.limit:type_name -> NYql.NConnector.NApi.TSelect.TLimit
	10, // 15: NYql.NConnector.NApi.TSplit.select:type_name -> NYql.NConnector.NApi.TSelect
	37, // 16: NYql.NConnector.NApi.TReadSplitsRequest.data_source_instance:type_name -> NYql.NConnector.NApi.TDataSourceInstance
	11, // 17: NYql.NConnector.NApi.TReadSplitsRequest.splits:type_name -> NYql.NConnector.NApi.TSplit
	0,  // 18: NYql.NConnector.NApi.TReadSplitsRequest.mode:type_name -> NYql.NConnector.NApi.TReadSplitsRequest.EMode
	1,  // 19: NYql.NConnector.NApi.TReadSplitsRequest.format:type_name -> NYql.NConnector.NApi.TReadSplitsRequest.EFormat
	14, // 20: NYql.NConnector.NApi.TReadSplitsRequest.pagination:type_name -> NYql.NConnector.NApi.TPagination
	15, // 21: NYql.NConnector.NApi.TReadSplitsRequest.continuation:type_name -> NYql.NConnector.NApi.TContinuation
	24, // 22: NYql.NConnector.NApi.TReadSplitsResponse.column_set:type_name -> NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet
	15, // 23: NYql.NConnector.NApi.TReadSplitsResponse.continuation:type_name -> NYql.NConnector.NApi.TContinuation
	17, // 24: NYql.NConnector.NApi.TReadSplitsResponse.error:type_name -> NYql.NConnector.NApi.TError
	26, // 25: NYql.NConnector.NApi.TFilter.comparison:type_name -> NYql.NConnector.NApi.TFilter.TComparison
	27, // 26: NYql.NConnector.NApi.TFilter.conjunction:type_name -> NYql.NConnector.NApi.TFilter.TConjunction
	28, // 27: NYql.NConnector.NApi.TFilter.disjunction:type_name -> NYql.NConnector.NApi.TFilter.TDisjunction
	29, // 28: NYql.NConnector.NApi.TFilter.negation:type_name -> NYql.NConnector.NApi.TFilter.TNegation
	30, // 29: NYql.NConnector.NApi.TFilter.sub_expr:type_name -> NYql.NConnector.NApi.TFilter.TSubExpr
	39, // 30: NYql.NConnector.NApi.TError.status:type_name -> Ydb.StatusIds.StatusCode
	40, // 31: NYql.NConnector.NApi.TError.issues:type_name -> Ydb.Issue.IssueMessage
	36, // 32: NYql.NConnector.NApi.TAst.list:type_name -> NYql.NConnector.NApi.TAst.TList
	23, // 33: NYql.NConnector.NApi.TSelect.TWhat.items:type_name -> NYql.NConnector.NApi.TSelect.TWhat.TItem
	16, // 34: NYql.NConnector.NApi.TSelect.TWhere.filter_typed:type_name -> NYql.NConnector.NApi.TFilter
	18, // 35: NYql.NConnector.NApi.TSelect.TWhere.filter_raw:type_name -> NYql.NConnector.NApi.TAst
	38, // 36: NYql.NConnector.NApi.TSelect.TWhat.TItem.column:type_name -> Ydb.Column
	38, // 37: NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet.meta:type_name -> Ydb.Column
	25, // 38: NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet.data:type_name -> NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet.TColumn
	41, // 39: NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet.TColumn.data:type_name -> Ydb.Value
	31, // 40: NYql.NConnector.NApi.TFilter.TComparison.binary:type_name -> NYql.NConnector.NApi.TFilter.TComparison.TBinary
	32, // 41: NYql.NConnector.NApi.TFilter.TComparison.is_null:type_name -> NYql.NConnector.NApi.TFilter.TComparison.TIsNull
	33, // 42: NYql.NConnector.NApi.TFilter.TComparison.is_not_null:type_name -> NYql.NConnector.NApi.TFilter.TComparison.TIsNotNull
	34, // 43: NYql.NConnector.NApi.TFilter.TComparison.in:type_name -> NYql.NConnector.NApi.TFilter.TComparison.TIn
	35, // 44: NYql.NConnector.NApi.TFilter.TComparison.between:type_name -> NYql.NConnector.NApi.TFilter.TComparison.TBetween
	16, // 45: NYql.NConnector.NApi.TFilter.TConjunction.operands:type_name -> NYql.NConnector.NApi.TFilter
	16, // 46: NYql.NConnector.NApi.TFilter.TDisjunction.operands:type_name -> NYql.NConnector.NApi.TFilter
	16, // 47: NYql.NConnector.NApi.TFilter.TNegation.operand:type_name -> NYql.NConnector.NApi.TFilter
	16, // 48: NYql.NConnector.NApi.TFilter.TSubExpr.operand:type_name -> NYql.NConnector.NApi.TFilter
	42, // 49: NYql.NConnector.NApi.TFilter.TComparison.TBinary.typed_value:type_name -> Ydb.TypedValue
	42, // 50: NYql.NConnector.NApi.TFilter.TComparison.TIn.values:type_name -> Ydb.TypedValue
	42, // 51: NYql.NConnector.NApi.TFilter.TComparison.TBetween.least:type_name -> Ydb.TypedValue
	42, // 52: NYql.NConnector.NApi.TFilter.TComparison.TBetween.greatest:type_name -> Ydb.TypedValue
	18, // 53: NYql.NConnector.NApi.TAst.TList.children:type_name -> NYql.NConnector.NApi.TAst
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() {
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_init()
}
func file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_init() {
	if File_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListSplitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListSplitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadSplitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadSplitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TContinuation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSelect_TWhat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSelect_TFrom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSelect_TWhere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSelect_TLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSelect_TWhat_TItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadSplitsResponse_TColumnSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadSplitsResponse_TColumnSet_TColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter_TComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter_TConjunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter_TDisjunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter_TNegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter_TSubExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter_TComparison_TBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter_TComparison_TIsNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter_TComparison_TIsNotNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter_TComparison_TIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter_TComparison_TBetween); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAst_TList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TListTablesRequest_Pattern)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*TSplit_Description)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*TReadSplitsResponse_ColumnSet)(nil),
		(*TReadSplitsResponse_ArrowIpcStreaming)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*TContinuation_Description)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*TFilter_Comparison)(nil),
		(*TFilter_Conjunction)(nil),
		(*TFilter_Disjunction)(nil),
		(*TFilter_Negation)(nil),
		(*TFilter_SubExpr)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*TAst_Atom)(nil),
		(*TAst_List)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*TSelect_TWhat_TItem_Column)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*TFilter_TComparison_Binary)(nil),
		(*TFilter_TComparison_IsNull)(nil),
		(*TFilter_TComparison_IsNotNull)(nil),
		(*TFilter_TComparison_In)(nil),
		(*TFilter_TComparison_Between)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*TFilter_TComparison_TBinary_TypedValue)(nil),
		(*TFilter_TComparison_TBinary_Column)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_goTypes,
		DependencyIndexes: file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_depIdxs,
		EnumInfos:         file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes,
		MessageInfos:      file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes,
	}.Build()
	File_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto = out.File
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDesc = nil
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_goTypes = nil
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_depIdxs = nil
}
